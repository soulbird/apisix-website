"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4077],{35318:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(c,".").concat(m)]||u[m]||s[m]||l;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},33684:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return d}});var a=n(25773),r=n(30808),l=(n(27378),n(35318)),o=["components"],i={title:"Deployment Role"},c=void 0,p={unversionedId:"architecture-design/deployment-role",id:"architecture-design/deployment-role",isDocsHomePage:!1,title:"Deployment Role",description:"\x3c!--",source:"@site/docs/apisix/architecture-design/deployment-role.md",sourceDirName:"architecture-design",slug:"/architecture-design/deployment-role",permalink:"/zh/docs/apisix/next/architecture-design/deployment-role",editUrl:"https://github.com/apache/apisix/edit/master/docs/zh/latest/architecture-design/deployment-role.md",tags:[],version:"current",frontMatter:{title:"Deployment Role"},sidebar:"docs",previous:{title:"Debug Mode",permalink:"/zh/docs/apisix/next/architecture-design/debug-mode"},next:{title:"API Gateway",permalink:"/zh/docs/apisix/next/terminology/api-gateway"}},d=[{value:"Concept",id:"concept",children:[]},{value:"Deployment Modes",id:"deployment-modes",children:[{value:"Traditional",id:"traditional",children:[]},{value:"Decoupled",id:"decoupled",children:[]},{value:"Standalone",id:"standalone",children:[]}]}],s={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"concept"},"Concept"),(0,l.kt)("p",null,"Previously, the DP (Data Plane) and the CP (Control Plane) are not separate explicitly."),(0,l.kt)("p",null,"Although we clearly distinguish the different responsibilities of DP and CP in the documentation, not everyone has correctly deployed APISIX in the production environment."),(0,l.kt)("p",null,"Therefore, we introduce new concepts called deployment modes/roles, to help users deploy APISIX easily and safely."),(0,l.kt)("p",null,"APISIX under different deployment modes will act differently."),(0,l.kt)("p",null,"The table below shows the relationship among deployment modes and roles:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Deployment Modes"),(0,l.kt)("th",{parentName:"tr",align:null},"Role"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"traditional"),(0,l.kt)("td",{parentName:"tr",align:null},"traditional"),(0,l.kt)("td",{parentName:"tr",align:null},"DP + CP are deployed together by default. People need to disable ",(0,l.kt)("inlineCode",{parentName:"td"},"enable_admin")," manually")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"decoupled"),(0,l.kt)("td",{parentName:"tr",align:null},"data_plane / control_plane"),(0,l.kt)("td",{parentName:"tr",align:null},"DP and CP are deployed independently.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"standalone"),(0,l.kt)("td",{parentName:"tr",align:null},"data_plane"),(0,l.kt)("td",{parentName:"tr",align:null},"Only DP, load the all configurations from local yaml file")))),(0,l.kt)("h2",{id:"deployment-modes"},"Deployment Modes"),(0,l.kt)("h3",{id:"traditional"},"Traditional"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/deployment-traditional.png",alt:"traditional"})),(0,l.kt)("p",null,"In the traditional deployment mode, one instance can be both DP & CP."),(0,l.kt)("p",null,"There will be a ",(0,l.kt)("inlineCode",{parentName:"p"},"conf server")," listens on UNIX socket and acts as a proxy between APISIX and etcd."),(0,l.kt)("p",null,"Both the DP part and CP part of the instance will connect to the ",(0,l.kt)("inlineCode",{parentName:"p"},"conf server")," via HTTP protocol."),(0,l.kt)("p",null,"Here is the example of configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/config.yaml"',title:'"conf/config.yaml"'},"deployment:\n    role: traditional\n    role_traditional:\n        config_provider: etcd\n    etcd:\n       host:\n           - http://xxxx\n       prefix: /apisix\n       timeout: 30\n")),(0,l.kt)("h3",{id:"decoupled"},"Decoupled"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/deployment-cp_and_dp.png",alt:"decoupled"})),(0,l.kt)("p",null,"The instance deployed as data_plane will:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Fetch configurations from the CP, the default port is 9280"),(0,l.kt)("li",{parentName:"ol"},"Before the DP service starts, it will perform a health check on all CP addresses",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If all CP addresses are unavailable, the startup fails and an exception message is output to the screen."),(0,l.kt)("li",{parentName:"ul"},"If at least one CP address is available, print the unhealthy CP check result log, and then start the APISIX service."),(0,l.kt)("li",{parentName:"ul"},"If all CP addresses are normal, start the APISIX service normally."))),(0,l.kt)("li",{parentName:"ol"},"Handle user requests.")),(0,l.kt)("p",null,"Here is the example of configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/config.yaml"',title:'"conf/config.yaml"'},"deployment:\n    role: data_plane\n    role_data_plane:\n       config_provider: control_plane\n       control_plane:\n           host:\n               - xxxx:9280\n           timeout: 30\n    certs:\n        cert: /path/to/ca-cert\n        cert_key: /path/to/ca-cert\n        trusted_ca_cert: /path/to/ca-cert\n")),(0,l.kt)("p",null,"The instance deployed as control_plane will:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Listen on 9180 by default, and provide Admin API for Admin user"),(0,l.kt)("li",{parentName:"ol"},"Provide ",(0,l.kt)("inlineCode",{parentName:"li"},"conf server")," which listens on port 9280 by default. Both the DP instances and this CP instance will connect to the ",(0,l.kt)("inlineCode",{parentName:"li"},"conf server")," via HTTPS enforced by mTLS.")),(0,l.kt)("p",null,"Here is the example of configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/config.yaml"',title:'"conf/config.yaml"'},"deployment:\n    role: control_plane\n    role_control_plan:\n        config_provider: etcd\n        conf_server:\n            listen: 0.0.0.0:9280\n            cert: /path/to/ca-cert\n            cert_key: /path/to/ca-cert\n            client_ca_cert: /path/to/ca-cert\n    etcd:\n       host:\n           - https://xxxx\n       prefix: /apisix\n       timeout: 30\n    certs:\n        cert: /path/to/ca-cert\n        cert_key: /path/to/ca-cert\n        trusted_ca_cert: /path/to/ca-cert\n")),(0,l.kt)("h3",{id:"standalone"},"Standalone"),(0,l.kt)("p",null,"In this mode, APISIX is deployed as DP and reads configurations from yaml file in the local file system."),(0,l.kt)("p",null,"Here is the example of configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/config.yaml"',title:'"conf/config.yaml"'},"deployment:\n    role: data_plane\n    role_data_plane:\n       config_provider: yaml\n")))}u.isMDXComponent=!0}}]);